import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { Button } from "react-bootstrap";
import io, { Socket } from "socket.io-client";
import { DefaultEventsMap } from "socket.io/dist/typed-events";
import {
  Client2Server,
  ProcessHandlingStatus,
  Server2Client,
} from "../utils/constant";
import { MkOfferResult, SocketResponse } from "../utils/interfaces";

let socket: Socket<DefaultEventsMap, DefaultEventsMap>;
const RUN_ARR = [
  ...Array(4)
    .fill(1)
    .map((v, i) => i + 1),
];

const Home: NextPage = () => {
  const [results, setResults] = useState<MkOfferResult[]>([]);
  const [handlingStatus, setHandlingStatus] = useState<ProcessHandlingStatus>(
    ProcessHandlingStatus.STOPPED
  );
  useEffect(() => {
    socketInitializer();
  }, []);

  const socketInitializer = async () => {
    await fetch("/api/socket");
    socket = io();

    socket.on("connect", () => {
      console.log("connected");
    });

    socket.on(Server2Client.UPDATE_RESULT, (results) => {
      setResults(results);
    });
    socket.on(Server2Client.NO_MORE_ITEM, () => {
      console.log("done");
      setHandlingStatus(ProcessHandlingStatus.STOPPED);
    });
  };

  const isRunning = () => {
    return handlingStatus === ProcessHandlingStatus.RUNNING;
  };
  const isPause = () => {
    return handlingStatus === ProcessHandlingStatus.PAUSED;
  };
  const isStop = () => {
    return handlingStatus === ProcessHandlingStatus.STOPPED;
  };
  const getPlayText = () => {
    return isPause() ? "Resume" : "Start";
  };

  const getPlayDisable = () => {
    return isRunning();
  };

  const play = () => {
    if (handlingStatus === ProcessHandlingStatus.PAUSED) {
      resumePro();
    } else {
      startPro();
    }
  };

  const startPro = () => {
    console.log(111, "cli");
    socket.emit(Client2Server.START_PROCESS, RUN_ARR, (res: SocketResponse) => {
      if (res.error) {
        console.log(res.status);
        return;
      } else {
        setHandlingStatus(ProcessHandlingStatus.RUNNING);
        setResults([]);
      }
    });
  };
  const resumePro = () => {
    socket.emit(Client2Server.RESUME_PROCESS, null, (res: any) => {
      setHandlingStatus(ProcessHandlingStatus.RUNNING);
    });
  };
  const pauseProcess = () => {
    socket.emit(Client2Server.PAUSE_PROCESS, null, (res: any) => {
      setHandlingStatus(ProcessHandlingStatus.PAUSED);
    });
    // socket.emit(Client2Server.START_PROCESS, RUN_ARR);
  };
  const stopProcess = () => {
    socket.emit(Client2Server.STOP_PROCESS, null, (res: any) => {
      setHandlingStatus(ProcessHandlingStatus.STOPPED);
    });
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Button disabled={getPlayDisable()} onClick={play}>
          {getPlayText()}
        </Button>
        <Button disabled={!isRunning()} onClick={pauseProcess}>
          Pause
        </Button>
        <Button disabled={isStop()} onClick={stopProcess}>
          Stop
        </Button>
        <br />
        <ul>
          {results.map((r, index) => (
            <li key={index}>
              {r.url}: {r.status}
            </li>
          ))}
        </ul>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
